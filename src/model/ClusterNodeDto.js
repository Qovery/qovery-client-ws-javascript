/**
 * websocket-gateway
 * Describe the weboscket endpoints
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: erebe@erebe.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NodeAddressDto from './NodeAddressDto';
import NodeConditionDto from './NodeConditionDto';
import NodePodInfoDto from './NodePodInfoDto';
import NodeResourceDto from './NodeResourceDto';
import NodeTaintDto from './NodeTaintDto';

/**
 * The ClusterNodeDto model module.
 * @module model/ClusterNodeDto
 * @version $(grep &#39;version&#39; _build/openapi.yaml | head -1 | tr &#39;:&#39; &#39;\n&#39; | tail -1 | tr -d &#39; &#39;)
 */
class ClusterNodeDto {
    /**
     * Constructs a new <code>ClusterNodeDto</code>.
     * @alias module:model/ClusterNodeDto
     * @param addresses {Array.<module:model/NodeAddressDto>} 
     * @param annotations {Object.<String, String>} 
     * @param architecture {String} 
     * @param conditions {Array.<module:model/NodeConditionDto>} 
     * @param kernelVersion {String} 
     * @param kubeletVersion {String} 
     * @param labels {Object.<String, String>} 
     * @param name {String} 
     * @param operatingSystem {String} 
     * @param osImage {String} 
     * @param pods {Array.<module:model/NodePodInfoDto>} 
     * @param resourcesAllocatable {module:model/NodeResourceDto} 
     * @param taints {Array.<module:model/NodeTaintDto>} 
     * @param unschedulable {Boolean} 
     */
    constructor(addresses, annotations, architecture, conditions, kernelVersion, kubeletVersion, labels, name, operatingSystem, osImage, pods, resourcesAllocatable, taints, unschedulable) { 
        
        ClusterNodeDto.initialize(this, addresses, annotations, architecture, conditions, kernelVersion, kubeletVersion, labels, name, operatingSystem, osImage, pods, resourcesAllocatable, taints, unschedulable);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, addresses, annotations, architecture, conditions, kernelVersion, kubeletVersion, labels, name, operatingSystem, osImage, pods, resourcesAllocatable, taints, unschedulable) { 
        obj['addresses'] = addresses;
        obj['annotations'] = annotations;
        obj['architecture'] = architecture;
        obj['conditions'] = conditions;
        obj['kernel_version'] = kernelVersion;
        obj['kubelet_version'] = kubeletVersion;
        obj['labels'] = labels;
        obj['name'] = name;
        obj['operating_system'] = operatingSystem;
        obj['os_image'] = osImage;
        obj['pods'] = pods;
        obj['resources_allocatable'] = resourcesAllocatable;
        obj['taints'] = taints;
        obj['unschedulable'] = unschedulable;
    }

    /**
     * Constructs a <code>ClusterNodeDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClusterNodeDto} obj Optional instance to populate.
     * @return {module:model/ClusterNodeDto} The populated <code>ClusterNodeDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClusterNodeDto();

            if (data.hasOwnProperty('addresses')) {
                obj['addresses'] = ApiClient.convertToType(data['addresses'], [NodeAddressDto]);
            }
            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], {'String': 'String'});
            }
            if (data.hasOwnProperty('architecture')) {
                obj['architecture'] = ApiClient.convertToType(data['architecture'], 'String');
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [NodeConditionDto]);
            }
            if (data.hasOwnProperty('kernel_version')) {
                obj['kernel_version'] = ApiClient.convertToType(data['kernel_version'], 'String');
            }
            if (data.hasOwnProperty('kubelet_version')) {
                obj['kubelet_version'] = ApiClient.convertToType(data['kubelet_version'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('operating_system')) {
                obj['operating_system'] = ApiClient.convertToType(data['operating_system'], 'String');
            }
            if (data.hasOwnProperty('os_image')) {
                obj['os_image'] = ApiClient.convertToType(data['os_image'], 'String');
            }
            if (data.hasOwnProperty('pods')) {
                obj['pods'] = ApiClient.convertToType(data['pods'], [NodePodInfoDto]);
            }
            if (data.hasOwnProperty('resources_allocatable')) {
                obj['resources_allocatable'] = NodeResourceDto.constructFromObject(data['resources_allocatable']);
            }
            if (data.hasOwnProperty('taints')) {
                obj['taints'] = ApiClient.convertToType(data['taints'], [NodeTaintDto]);
            }
            if (data.hasOwnProperty('unschedulable')) {
                obj['unschedulable'] = ApiClient.convertToType(data['unschedulable'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClusterNodeDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClusterNodeDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ClusterNodeDto.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['addresses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['addresses'])) {
                throw new Error("Expected the field `addresses` to be an array in the JSON data but got " + data['addresses']);
            }
            // validate the optional field `addresses` (array)
            for (const item of data['addresses']) {
                NodeAddressDto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['architecture'] && !(typeof data['architecture'] === 'string' || data['architecture'] instanceof String)) {
            throw new Error("Expected the field `architecture` to be a primitive type in the JSON string but got " + data['architecture']);
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                NodeConditionDto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kernel_version'] && !(typeof data['kernel_version'] === 'string' || data['kernel_version'] instanceof String)) {
            throw new Error("Expected the field `kernel_version` to be a primitive type in the JSON string but got " + data['kernel_version']);
        }
        // ensure the json data is a string
        if (data['kubelet_version'] && !(typeof data['kubelet_version'] === 'string' || data['kubelet_version'] instanceof String)) {
            throw new Error("Expected the field `kubelet_version` to be a primitive type in the JSON string but got " + data['kubelet_version']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['operating_system'] && !(typeof data['operating_system'] === 'string' || data['operating_system'] instanceof String)) {
            throw new Error("Expected the field `operating_system` to be a primitive type in the JSON string but got " + data['operating_system']);
        }
        // ensure the json data is a string
        if (data['os_image'] && !(typeof data['os_image'] === 'string' || data['os_image'] instanceof String)) {
            throw new Error("Expected the field `os_image` to be a primitive type in the JSON string but got " + data['os_image']);
        }
        if (data['pods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pods'])) {
                throw new Error("Expected the field `pods` to be an array in the JSON data but got " + data['pods']);
            }
            // validate the optional field `pods` (array)
            for (const item of data['pods']) {
                NodePodInfoDto.validateJSON(item);
            };
        }
        // validate the optional field `resources_allocatable`
        if (data['resources_allocatable']) { // data not null
          NodeResourceDto.validateJSON(data['resources_allocatable']);
        }
        if (data['taints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taints'])) {
                throw new Error("Expected the field `taints` to be an array in the JSON data but got " + data['taints']);
            }
            // validate the optional field `taints` (array)
            for (const item of data['taints']) {
                NodeTaintDto.validateJSON(item);
            };
        }

        return true;
    }


}

ClusterNodeDto.RequiredProperties = ["addresses", "annotations", "architecture", "conditions", "kernel_version", "kubelet_version", "labels", "name", "operating_system", "os_image", "pods", "resources_allocatable", "taints", "unschedulable"];

/**
 * @member {Array.<module:model/NodeAddressDto>} addresses
 */
ClusterNodeDto.prototype['addresses'] = undefined;

/**
 * @member {Object.<String, String>} annotations
 */
ClusterNodeDto.prototype['annotations'] = undefined;

/**
 * @member {String} architecture
 */
ClusterNodeDto.prototype['architecture'] = undefined;

/**
 * @member {Array.<module:model/NodeConditionDto>} conditions
 */
ClusterNodeDto.prototype['conditions'] = undefined;

/**
 * @member {String} kernel_version
 */
ClusterNodeDto.prototype['kernel_version'] = undefined;

/**
 * @member {String} kubelet_version
 */
ClusterNodeDto.prototype['kubelet_version'] = undefined;

/**
 * @member {Object.<String, String>} labels
 */
ClusterNodeDto.prototype['labels'] = undefined;

/**
 * @member {String} name
 */
ClusterNodeDto.prototype['name'] = undefined;

/**
 * @member {String} operating_system
 */
ClusterNodeDto.prototype['operating_system'] = undefined;

/**
 * @member {String} os_image
 */
ClusterNodeDto.prototype['os_image'] = undefined;

/**
 * @member {Array.<module:model/NodePodInfoDto>} pods
 */
ClusterNodeDto.prototype['pods'] = undefined;

/**
 * @member {module:model/NodeResourceDto} resources_allocatable
 */
ClusterNodeDto.prototype['resources_allocatable'] = undefined;

/**
 * @member {Array.<module:model/NodeTaintDto>} taints
 */
ClusterNodeDto.prototype['taints'] = undefined;

/**
 * @member {Boolean} unschedulable
 */
ClusterNodeDto.prototype['unschedulable'] = undefined;






export default ClusterNodeDto;

