/**
 * websocket-gateway
 * Describe the weboscket endpoints
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: erebe@erebe.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NodeConditionDto model module.
 * @module model/NodeConditionDto
 * @version $(grep &#39;version&#39; _build/openapi.yaml | head -1 | tr &#39;:&#39; &#39;\n&#39; | tail -1 | tr -d &#39; &#39;)
 */
class NodeConditionDto {
    /**
     * Constructs a new <code>NodeConditionDto</code>.
     * @alias module:model/NodeConditionDto
     * @param message {String} 
     * @param reason {String} 
     * @param status {String} 
     * @param type {String} 
     */
    constructor(message, reason, status, type) { 
        
        NodeConditionDto.initialize(this, message, reason, status, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, message, reason, status, type) { 
        obj['message'] = message;
        obj['reason'] = reason;
        obj['status'] = status;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>NodeConditionDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeConditionDto} obj Optional instance to populate.
     * @return {module:model/NodeConditionDto} The populated <code>NodeConditionDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeConditionDto();

            if (data.hasOwnProperty('last_heartbeat_time')) {
                obj['last_heartbeat_time'] = ApiClient.convertToType(data['last_heartbeat_time'], 'Number');
            }
            if (data.hasOwnProperty('last_transition_time')) {
                obj['last_transition_time'] = ApiClient.convertToType(data['last_transition_time'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeConditionDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeConditionDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NodeConditionDto.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

NodeConditionDto.RequiredProperties = ["message", "reason", "status", "type"];

/**
 * Unix timestamp with millisecond precision
 * @member {Number} last_heartbeat_time
 */
NodeConditionDto.prototype['last_heartbeat_time'] = undefined;

/**
 * Unix timestamp with millisecond precision
 * @member {Number} last_transition_time
 */
NodeConditionDto.prototype['last_transition_time'] = undefined;

/**
 * @member {String} message
 */
NodeConditionDto.prototype['message'] = undefined;

/**
 * @member {String} reason
 */
NodeConditionDto.prototype['reason'] = undefined;

/**
 * @member {String} status
 */
NodeConditionDto.prototype['status'] = undefined;

/**
 * @member {String} type
 */
NodeConditionDto.prototype['type'] = undefined;






export default NodeConditionDto;

